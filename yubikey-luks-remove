#!/bin/sh
DISK="/dev/sda3"
NAME="yubikey-luks"
DBG=0
YUBIKEY_LUKS_SLOT=2 #Set this in case the value is missing in /etc/ykluks.cfg

set -e
. /etc/ykluks.cfg

while getopts ":d:s:hv" opt; do
    case $opt in
    d)
        DISK=$OPTARG
        echo "setting disk to $OPTARG."
        ;;
    s)
        SLOT=$OPTARG
        echo "setting keyslot to $OPTARG."
        ;;
    v)
        DBG=1
        echo "debugging enabled"
        ;;
    h)
        echo
        echo " -d <partition>: select existing partition"
        echo " -s <keyslot>  : set the keyslot to remove"
        echo " -v            : show input/output in cleartext"
        echo
        exit 1
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        ;;
    esac
done

echo "This script will try removing keyslot $SLOT from $NAME LUKS container on drive $DISK . If this is not what you intended, exit now!"


P1=$(/lib/cryptsetup/askpass "Enter passphrase:")

read -p "\nAre you using a Yubikey with this passphrase? [Y/n]  " USE_YUBIKEY

if [ "$USE_YUBIKEY" = "y" ] || [ "$USE_YUBIKEY" = "Y" ]; then

    while true ; do
        if lsusb | grep -iq 'yubico'; then break; fi
        printf "Please insert a yubikey and press enter."
        read -r _ <&1
    done


    if [ "$DBG" = "1" ]; then echo "Password: $P1"; fi

    if [ "$HASH" = "1" ]; then
        P1=$(printf %s "$P1" | sha256sum | awk '{print $1}')
        if [ "$DBG" = "1" ]; then echo "Password hash: $P1"; fi
    fi

    R="$(printf %s "$P1" | ykchalresp -"$YUBIKEY_LUKS_SLOT" -i- 2>/dev/null || true)"
    if [ "$DBG" = "1" ]; then echo "Yubikey response: $R"; fi

    if [ -z "$R" ]; then
        echo "Yubikey not available or timed out waiting for button press"
        exit 1
    fi

    _passphrase=''
    if [ "$CONCATENATE" = "1" ]; then
        _passphrase=$(printf '%s' "$P1$R")
    else
        _passphrase=$(printf '%s' "$R")
    fi
    
else
    _passphrase=$P1
fi


if [ "$DBG" = "1" ]; then echo "LUKS key: ${_passphrase}"; fi

if [ "$(id -u)" -eq 0 ]; then
    printf %s "${_passphrase}" | cryptsetup luksKillSlot "$DISK" "$SLOT" 2>&1;
else
    echo "\n[Error] This script must be run as root\n"
fi

exit 0
